@page "/exercise/{id:int}"
@inject IExerciseService ExerciseService
@inject ISavedExerciseService SavedExerciseService
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h3>ExerciseDetails</h3>

@if (exercise == null)
{
    <span>@message</span>
}
else
{
    <h1 class="mb-0 text-center font-weight-bold">@exercise.Name</h1>
    <div class="media align-items-center">
        <div style="margin:auto">
            <div class="media-img-wrapper mr-2">
                <img class="media-img border" src="@exercise.gifUrl" alt="@exercise.Name" />
            </div>
            <div class="media-body">
                <h3>BodyPart: @exercise.BodyPart</h3>
                <h3>Equipment: @exercise.Equipment</h3>
                <h3>Target: @exercise.Target</h3>
            </div>
            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-primary" @onclick="AddToSavedExercises">
                        <i class="oi oi-list"></i>&nbsp;&nbsp;&nbsp;Add to saved exercises
                    </button>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}


@code {
    private Exercise exercise = null;

    private string message;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Exercise...";

        var result = await ExerciseService.GetExerciseById(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            exercise = result.Data;
        }
    }

    private async Task AddToSavedExercises()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User.Identity.Name;
        await SavedExerciseService.AddSavedExercise(exercise, user);
    }

}
